montageDefine("daa4856","vendor/requirejs/tests/browsertests/scriptloadinteractiveattach/index.html",{text:'<!DOCTYPE html><html><head>\n    <title>Script Load Interactive Test: attachEvent</title>\n    <script src=../common.js></script>\n    <script>\n    /*jslint plusplus: false, strict: false */\n    /*global log: false, dumpLogs: false */\n    //cache bust?\n    var noCache = location.href.indexOf("nocache") !== -1;\n\n    log("noCache: " + noCache);\n\n    var readyRegExp = /complete|loaded/,\n        useInteractive = false,\n        loadedScripts = [],\n        callCount = 0,\n        currentlyAddingScript,\n        waitingFunc, loadUrls,\n        urls = [\n            "one.js",\n            "two.js",\n            "three.js",\n            "four.js",\n            "five.js",\n            "six.js",\n            "seven.js",\n            "eight.js",\n            "nine.js"\n        ];\n\n    function report() {\n        var i, module;\n        for (i = 0; i < loadedScripts.length; i++) {\n            module = loadedScripts[i];\n            log("module " + module.name + " === " + module.obj.name);\n        }\n        callCount += 1;\n        //dumpLogs();\n        if (callCount === 1) {\n            log("-------Trying cache hits now--------");\n            loadedScripts = [];\n            setTimeout(loadUrls, 500);\n        }\n    }\n\n    function finishScript(script, func) {\n        if (!script) {\n            return;\n        }\n\n        loadedScripts.push({\n            name: script.getAttribute(\'data-name\').replace(/\\.js$/, \'\'),\n            obj: func()\n        });\n\n        if (loadedScripts.length === 9) {\n            report();\n        }\n    }\n\n    function onTestScriptLoad(evt) {\n        var node = evt.target || evt.srcElement;\n        if (evt.type === "load" || readyRegExp.test(node.readyState)) {\n            if (!useInteractive) {\n                finishScript(node, waitingFunc);\n            }\n\n            //Clean up\n            if (node.detachEvent) {\n                //Probably IE.\n                node.detachEvent("onreadystatechange", onTestScriptLoad);\n            } else if (node.removeEventListener) {\n                node.removeEventListener("load", onTestScriptLoad, false);\n            }\n        }\n    }\n    function attachScript(url, name, useDocWrite) {\n        if (noCache) {\n            url += "?stamp=" + (new Date()).getTime();\n        }\n        var node = document.createElement("script");\n        node.src = url;\n        node.type = "text/javascript";\n        node.charset = "utf-8";\n        node.setAttribute("data-name", name);\n\n        //Set up load listener.\n        if (node.attachEvent) {\n            //Probably IE.\n            useInteractive = true;\n            node.attachEvent("onreadystatechange", onTestScriptLoad);\n        } else if (node.addEventListener) {\n            node.addEventListener("load", onTestScriptLoad, false);\n        }\n        currentlyAddingScript = node;\n\n        document.getElementsByTagName("head")[0].appendChild(node);\n        currentlyAddingScript = null;\n    }\n\n    loadUrls = function () {\n        for (var i = 0, url; (url = urls[i]); i++) {\n            attachScript(url, url);\n        }\n    };\n\n    function def(func) {\n        var scripts, i, script = currentlyAddingScript;\n        if (useInteractive) {\n            scripts = document.getElementsByTagName(\'script\');\n            var states = [];\n            for (i = scripts.length - 1; i > -1; i--) {\n                states.push(i + scripts[i].readyState + scripts[i].src);\n                //log(\'script with name \' + scripts[i].getAttribute(\'data-name\') + \' has readyState = \' + scripts[i].readyState + \' for func: \' + func);\n                if (scripts[i].readyState === \'interactive\') {\n                    script = scripts[i];\n                    break;\n                }\n            }\n            if (!script) {\n                log("ERROR: No matching script interactive for " + func);\n                log("script readyStates are: " + states);\n            }\n            //log(\'calling finishScript for interactive dat-name: \' + script.getAttribute(\'data-name\'));\n            finishScript(script, func);\n        } else {\n            waitingFunc = func;\n        }\n    }\n\n    //Do appendChilds\n    loadUrls();\n\n    </script>\n</head>\n<body>\n    <h1>Script Load Interactive Test: attachEvent</h1>\n\n    <p><b>This test difffers from scriptloadinteractive in that attachEvent is preferred over\n    addEventListener to work around an IE9 issue where its addEventListener behavior does not match\n    all other addEventListener browsers that fire the script onload event right after executing a\n    script (at least before executing any other script).</b></p>\n    <p>This test checks to see if a function call can be associated with a specific script tag.</p>\n    <p>For non-IE 6-8 browsers, the script onload event may not fire right after the the script\n    is evaluated. Kris Zyp found for IE though that in a function call that is called while the\n    script is executed, it could query the script nodes and the one that is in "interactive" mode\n    indicates the current script.</p>\n    <p>So this test tries to see to use interactive state if possible, and if that does not work,\n    falls back to using script onload to associate the scripts.</p>\n    <p>Check the console for output. Expected result, all scripts are matched up with their calls.</p>\n\n\n</body></html>'});