montageDefine("daa4856","vendor/requirejs/docs/download.html",{text:'<html><head></head><body><div id=directory class=section>\n<h1>Download RequireJS</h1>\n<ul class="index mono">\n    <li class=hbox><a href=#latest>Latest Release</a><span class="spacer boxFlex"></span><span class=sect>§ 1</span></li>\n    <ul>\n        <li class=hbox><a href=#requirejs>require.js</a><span class="spacer boxFlex"></span><span class=sect>§ 1.1</span></li>\n        <li class=hbox><a href=#samplejquery>Sample RequireJS + jQuery 1.7 project</a><span class="spacer boxFlex"></span><span class=sect>§ 1.2</span></li>\n        <li class=hbox><a href=#rjs>r.js: Optimizer and Node and Rhino adapter</a><span class="spacer boxFlex"></span><span class=sect>§ 1.3</span></li>\n    </ul>\n    <li class=hbox><a href=#plugins>Plugins</a><span class="spacer boxFlex"></span><span class=sect>§ 2</span></li>\n    <ul>\n        <li class=hbox><a href=#text>text</a><span class="spacer boxFlex"></span><span class=sect>§ 2.1</span></li>\n        <li class=hbox><a href=#domReady>domReady</a><span class="spacer boxFlex"></span><span class=sect>§ 2.2</span></li>\n        <li class=hbox><a href=#order>order</a><span class="spacer boxFlex"></span><span class=sect>§ 2.3</span></li>\n        <li class=hbox><a href=#cs>cs (CoffeeScript)</a><span class="spacer boxFlex"></span><span class=sect>§ 2.4</span></li>\n        <li class=hbox><a href=#i18n>i18n</a><span class="spacer boxFlex"></span><span class=sect>§ 2.5</span></li>\n    </ul>\n    <li class=hbox><a href=#releasenotes>Release Notes</a><span class="spacer boxFlex"></span><span class=sect>§ 3</span></li>\n</ul>\n\n</div>\n\n<div class=section>\n<h2><a name=latest>Latest Release</a><span class=sectionMark>§ 1</span></h2>\n\n<div class=subSection>\n<h4 class=hbox>\n<a name=requirejs>require.js 1.0.7</a>\n<span class=boxFlex></span>\n<a class=download href=http://requirejs.org/docs/release/1.0.7/minified/require.js>Minified</a>\n<a class=download href=http://requirejs.org/docs/release/1.0.7/comments/require.js>With Comments</a>\n</h4>\n\n<p>All you need to start using require.js in the browser.</p>\n</div>\n\n<div class=subSection>\n<h4 class=hbox>\n<a name=samplejquery>Sample RequireJS 1.0.7 + jQuery 1.7.1 project</a>\n<span class=boxFlex></span>\n<a class=download href=http://requirejs.org/docs/release/jquery-require/jquery1.7.1-requirejs1.0.7/jquery-require-sample.zip>Download</a>\n</h4>\n\n<p>A zip file containing a sample project that uses jQuery and RequireJS.</p>\n</div>\n\n\n<div class=subSection>\n<h4 class=hbox>\n<a name=rjs>r.js: Optimizer and Node and Rhino adapter</a>\n<span class=boxFlex></span>\n<a class=download href=http://requirejs.org/docs/release/1.0.7/r.js>Download</a>\n</h4>\n\n<p>The r.js file allows you to run the optimizer as well as run modules in Node or Rhino.</p>\n\n<p>If you are running in Node, and want to use npm to install this file via npm, see the <a href=node.html>Use with Node</a> page for more information.</p>\n\n<p>For information on its use, as well as how to get the JAR files to run it under Rhino, see the <a href=https://github.com/jrburke/r.js>r.js README</a>.</p>\n\n</div>\n\n<div class=section>\n<h2><a name=plugins>Plugins</a><span class=sectionMark>§ 2</span></h2>\n\n<p>These are useful loader plugins that have the same license terms as require.js itself. Download the plugin file and place it as a sibling to your "data-main" main.js script.</p>\n\n<div class=subSection>\n<h4 class=hbox>\n<a name=text>text</a>\n<span class=boxFlex></span>\n<a class=download href=http://requirejs.org/docs/release/1.0.7/minified/text.js>Minified</a>\n<a class=download href=http://requirejs.org/docs/release/1.0.7/comments/text.js>With Comments</a>\n</h4>\n<p><a href=api.html#text>Load text files and treat them as dependencies</a>. Great for loading templates. The text strings can be inlined in an optimized build when the optimizer is used.</p>\n</div>\n\n<div class=subSection>\n<h4 class=hbox>\n<a name=domReady>domReady</a>\n<span class=boxFlex></span>\n<a class=download href=http://requirejs.org/docs/release/1.0.0/minified/domReady.js>Minified</a>\n<a class=download href=http://requirejs.org/docs/release/1.0.0/comments/domReady.js>With Comments</a>\n</h4>\n<p><a href=api.html#pageload>Wait for the DOM is ready</a>. Useful for pausing execution of top level application\nlogic until the DOM is ready for querying/modification.</p>\n</div>\n\n<div class=subSection>\n<h4 class=hbox>\n<a name=order>order</a>\n<span class=boxFlex></span>\n<a class=download href=http://requirejs.org/docs/release/1.0.5/minified/order.js>Minified</a>\n<a class=download href=http://requirejs.org/docs/release/1.0.5/comments/order.js>With Comments</a>\n</h4>\n<p><a href=api.html#order>Load script in the order specified in the dependency array</a>. Useful for existing scripts that have implied dependencies instead of calling define() to create modular code.</p>\n</div>\n\n\n<div class=subSection>\n<h4 class=hbox>\n<a name=cs>cs (CoffeeScript)</a>\n<span class=boxFlex></span>\n<a class=download href=https://github.com/jrburke/require-cs/raw/0.3.2/cs.js>With Comments</a>\n</h4>\n<p>Load files written in CoffeeScript. Includes a version of CoffeeScript, only this one file is needed. With this plugin, it is easy to code in CoffeeScript in the browser, it can participate in the optimizer optimizations, and it works in Node and Rhino via the <a href=#rjs>RequireJS adapter</a>. This is the best way to do cross-environment, modular CoffeeScript. <a href=https://github.com/jrburke/require-cs>The project home</a> has more information on how to use it.</p>\n</div>\n\n\n<div class=subSection>\n<h4 class=hbox>\n<a name=i18n>i18n</a>\n<span class=boxFlex></span>\n<a class=download href=http://requirejs.org/docs/release/1.0.0/minified/i18n.js>Minified</a>\n<a class=download href=http://requirejs.org/docs/release/1.0.0/comments/i18n.js>With Comments</a>\n</h4>\n<p><a href=api.html#i18n>Load string bundles</a> used in internationalization (i18n) that are made up of separate country/language/locale-specific bundles.</p>\n</div>\n\n</div>\n\n<div class=section>\n<h2><a name=releasenotes>Release Notes</a><span class=sectionMark>§ 3</span></h2>\n\n<h3 id=1-0-7>1.0.7</h3>\n\n<p>Small bug fixes to:</p>\n\n<ul>\n    <li><a href="https://github.com/jrburke/requirejs/issues?milestone=11&amp;sort=created&amp;direction=desc&amp;state=closed">require.js</a></li>\n    <li><a href="https://github.com/jrburke/r.js/issues?sort=created&amp;direction=desc&amp;state=closed&amp;page=1&amp;milestone=8">r.js optimizer</a></li>\n</ul>\n\n<h3 id=1-0-6>1.0.6</h3>\n\n<p>Main purpose of the release is to fix a regression in 1.0.5 where the\noptimizer\'s "dir" config option was not applied correctly when passed on the\ncommand line.</p>\n\n<p>The other notable change: the optimizer now supports\n<a href=https://github.com/jrburke/r.js/blob/master/build/example.build.js#L320>onBuildRead\nand onBuildWrite</a> functions that are called when JS modules are read or written\nfor an optimized build layer. This allows doing some regexp work to modify their\ncontents.</p>\n\n<p>Small bug fixes to:</p>\n\n<ul>\n    <li><a href="https://github.com/jrburke/requirejs/issues?milestone=10&amp;sort=created&amp;direction=desc&amp;state=closed">require.js</a></li>\n    <li><a href="https://github.com/jrburke/r.js/issues?sort=created&amp;direction=desc&amp;state=closed&amp;page=1&amp;milestone=7">r.js optimizer</a></li>\n</ul>\n\n<h3 id=1-0-5>1.0.5</h3>\n\n<p>Small bug fixes to:</p>\n\n<ul>\n    <li><a href="https://github.com/jrburke/requirejs/issues?milestone=8&amp;sort=created&amp;direction=desc&amp;state=closed">require.js</a></li>\n    <li><a href="https://github.com/jrburke/r.js/issues?sort=created&amp;direction=desc&amp;state=closed&amp;page=1&amp;milestone=6">r.js optimizer</a></li>\n</ul>\n\n<h3 id=1-0-4>1.0.4</h3>\n\n<p>Small bug fixes to:</p>\n\n<ul>\n    <li><a href="https://github.com/jrburke/requirejs/issues?milestone=7&amp;sort=created&amp;direction=desc&amp;state=closed">require.js</a></li>\n    <li><a href="https://github.com/jrburke/r.js/issues?milestone=5&amp;sort=created&amp;direction=desc&amp;state=closed">r.js optimizer</a></li>\n</ul>\n\n<h3 id=1-0-3>1.0.3</h3>\n\n<p>Small bug fixes to:</p>\n\n<ul>\n    <li><a href="https://github.com/jrburke/requirejs/issues?sort=created&amp;direction=desc&amp;state=closed&amp;page=1&amp;milestone=6">require.js</a></li>\n    <li><a href="https://github.com/jrburke/r.js/issues?sort=created&amp;direction=desc&amp;state=closed&amp;page=1&amp;milestone=4">r.js optimizer</a></li>\n</ul>\n\n<h3 id=1-0-2>1.0.2</h3>\n\n<p>Small bug fixes to:</p>\n\n<ul>\n    <li><a href="https://github.com/jrburke/requirejs/issues?sort=created&amp;direction=desc&amp;state=closed&amp;page=1&amp;milestone=5">require.js</a></li>\n    <li><a href="https://github.com/jrburke/r.js/issues?sort=created&amp;direction=desc&amp;state=closed&amp;page=1&amp;milestone=3">r.js optimizer</a></li>\n</ul>\n\n<h3 id=1-0-1>1.0.1</h3>\n\n<p>Just small bug fixes related to:</p>\n\n<ul>\n    <li>allowing full URLs for simplified CommonJS wrapped modules</li>\n    <li>AST parsing of dependencies for modules that use a variable for the factory function</li>\n    <li>catching more cases that should have the "namespace" optimizer option applied</li>\n</ul>\n\n<p>Detailed list of changes for require.js and the r.js optimizer:</p>\n\n<ul>\n    <li><a href="https://github.com/jrburke/requirejs/issues?milestone=4&amp;state=closed">require.js 1.0.1 changes</a></li>\n    <li><a href="https://github.com/jrburke/r.js/issues?milestone=2&amp;state=closed">r.js 1.0.1 changes</a></li>\n</ul>\n\n<h3 id=1-0-0>1.0.0</h3>\n\n<p>Same as RequireJS 0.27.1 release, with some document updates and a\nsmall fix to the optimizer\'s regular expression for converting CommonJS modules to AMD.</p>\n\n<h3 id=0-27-1>0.27.1</h3>\n\n<p>RequireJS 1.0 release candidate. Small bugfixes for 0.27.0:</p>\n\n<ul>\n    <li>define(id, function () {}) where the function has require(\'\') dependencies will now be scanned\n    for dependencies. Allows for smaller universal module adapters.</li>\n    <li>Loader plugin that depends on a different plugin\'s loaded resource works as it did in 0.26.0.</li>\n    <li>Optimizer: update UglifyJS to 1.1.</li>\n    <li>Optimizer: semicolons are inserted between files if concatenating would cause errors.</li>\n    <li>Optimizer: always strip BOM files on all platforms when file transforms/concatenations are done.</li>\n    <li>Optimizer: allow override of modules used in optimizer. <a href=https://github.com/jrburke/r.js/blob/master/build/tests/override/override.js>Example</a>.</li>\n    <li>Optimizer: allow copying of .directories via build config option.</li>\n    <li>Optimizer: Resolving paths for .js dependencies might fail if an appDir was not part of the config.</li>\n</ul>\n\n\n<h3 id=0-27-0>0.27.0</h3>\n\n<p>RequireJS 1.0 release candidate.</p>\n\n<ul>\n    <li><b>require.ready() has been removed</b>. In its place, use the <a href=api.html#pageload>domReady plugin</a>.\n    This allows better interoperability with other AMD loaders and better separation of concerns.</li>\n    <li>A new <a href=faq-optimization.html#wrap>wrap config option</a> for the optimizer is available,\n    for wrapping built code in a function. Allows for better API hiding and tiny builds with the\n    <a href=https://github.com/jrburke/almond>almond API shim</a>.</li>\n    <li>The order plugin is improved for IE.</li>\n    <li>Loader plugins can now have dependencies and they will work in the optimizer, as long as the\n    dependencies work in the optimizer environment (Node, Rhino).</li>\n    <li>The <a href=faq-optimization.html#namespace>namespace config option</a> for the optimizer is more robust.</li>\n    <li>Removed require.def(), use define() instead.</li>\n    <li>Removed module.setExports, use module.exports instead.</li>\n</ul>\n\n<h3 id=0-26-0>0.26.0</h3>\n\n<ul>\n    <li><strong>npm install requirejs</strong> to allow require("requirejs"). This allows you to:\n    <ul>\n        <li><a href=node.html#usage>Load AMD modules inside node</a> without running a bootstrap script. It also\n        fixes some path issues using traditional Node modules alongside AMD modules.</li>\n        <li>Exposes the optimizer as require("requirejs").optimize() to\n        <a href=https://github.com/jrburke/r.js/blob/master/build/tests/http/httpBuild.js>allow dynamic server builds</a>\n        for people who like to do "<a href=node.html#optimizer>only one script tag\n        in the page at the end of body" development</a>. With the "excludeShallow" optimizer config,\n        you can still debug a single module/script while having the rest combined into one script.</li>\n    </ul>\n    This is now the recommended path for using RequireJS in Node. More information on\n    the <a href=node.html>Use with Node</a> page.</li>\n\n    <li>UglifyJS in the minifier is updated to 1.0.6. The upside: now\n    <a href=optimization.html#hasjs>has() branch trimming</a> now works with\n    the default minifier.</li>\n\n    <li>Fixes for running under Node on Windows using the native node.exe builds that are now available\n    in the Node 0.5.x series. Now there is less of a need to use Java to drive the RequireJS\n    Optimizer!</li>\n\n    <li>Configuration is now done via a require.config({}) call, to get in line with\n    the <a href=https://github.com/amdjs/amdjs-api/wiki/require#wiki-globalConfig>amdjs require API</a>.\n    The old require({}) method works on the global require()\n    for backwards compatibility, but the suggested API going forward is require.config({}).\n    The <a href=api.html>API doc</a> has been updated to show proper usage.\n\n    </li><li>There is <a href=faq-advanced.html#rename>a namespace option now for builds</a>,\n    to allow moving require() and define()\n    calls under a different namespace. This allows you to build an optimized file that uses\n    RequireJS but does not interfere with any other AMD loader on the page, and you can make\n    sure only your modules are loaded in that namespaced object.</li>\n\n    <li>The default error behavior when a define() factory function throws an error is\n    to not catch it. The catching done in 0.25.0 made it more difficult to debug. However,\n    there are some situations where catching the errors is preferred. Setting the config\n    value <a href=api.html#config-catchError>catchError.define = true</a> will switch to catching the errors\n    and allow processing via require.onError()</li>\n\n    <li>Closure Compiler in the optimizer was updated. As a result, the code\n    to invoke Closure Compiler changed, and will likely only work with the latest\n    Closure Compiler release. You can grab a version known to work with\n    the optimizer in the optimizer\'s <a href=https://github.com/jrburke/r.js/tree/master/lib/closure>lib/closure directory</a>.</li>\n\n    <li>There is now a pragmasOnSave build option, which is used in the\n    <a href=https://github.com/jrburke/require-cs/blob/master/demo/build.js>require-cs CoffeeScript loader plugin build profile</a>\n    to strip out the\n    CoffeeScript compiler after a build. The end result: tiny build layers\n    of converted CoffeeScript code.</li>\n</ul>\n\n<h3 id=0-25-0>0.25.0</h3>\n\n<p>The awesome part: the optimizer is now just one JS file! It also doubles as a bootstrap script that supports the full capability of AMD modules and loader plugins in Node and in Rhino.</p>\n\n<p>To use the optimizer, pass the "-o" option to r.js:</p>\n\n<pre>    node r.js -o app.build.js</pre>\n\n<p>To run your AMD-based project via the adapter (assuming server.js is your top-level AMD module):</p>\n\n<pre>    node r.js server.js</pre>\n\n<p>There is more information about <a href=http://requirejs.org/docs/node.html>running AMD modules in Node</a>. The <a href=http://requirejs.org/docs/optimization.html>optimizer docs</a> have been updated to the new optimizer syntax, and the r.js script has <a href=https://github.com/jrburke/r.js>its own project now</a>, to allow releases that are decoupled from require.js.</p>\n\n<p>Other highlights:</p>\n\n<ul><li>The loader plugin API changed to allow plugins to create cross-domain-accessible resources. The main use case: you use the text plugin to dynamically load text resources, but you want to deploy those scripts to a CDN. See the <a href=http://requirejs.org/docs/download.html#text>text plugin</a>\'s implementation of writeFile() as an example.\n</li><li>There is now a global <span style="font-weight: bold">requirejs()</span> function object that is the same as the old global <span style="font-weight: bold">require()</span> function object. This should allow RequireJS to work better in environments like <a href="http://mozillalabs.com/chromeless/">Mozilla Chromeless</a>, which already have a built-in require() function that does not have full AMD/loader plugin capabilities.\n</li><li>It is now possible to <a href=http://requirejs.org/docs/api.html#config-jQuery>specify the precise version of jQuery</a> to allow in a RequireJS context. This is useful if you know of other scripts that load different versions of jQuery on a page.</li></ul>\n\n<p>Some changes in the name of compatibility with other AMD module loaders and Node:</p>\n\n\n<ul><li>The "lib" directory configuration in package support was removed. It was always very awkward to support, and Node no longer supports it, so it was enough justification to remove it.</li><li>Relative module IDs are now relative to the related module ID, not the related module ID path.</li><li>includeRequire in the optimizer config was removed, Use a paths config to include require.js instead. See the Optimization docs for more details.</li></ul>\n\n<p>A small change to the context-specific require() passed to <a href=http://requirejs.org/docs/plugins.html#apiload>a loader plugin\'s load() call</a>: require.isDefined() is now require.defined() and there is require. specified().</p>\n\n<h3>0.24.0</h3>\n\n<ul>\n<li>Support for IE 9. It has <a href=https://connect.microsoft.com/IE/feedback/details/648057/script-onload-event-is-not-fired-immediately-after-script-execution>a non-conformant script loading behavior</a> that necessitated the change. It would be ideal if IE 9 would change the behavior to be conformant.</li>\n<li>Changes to jQuery integration:\n    <ul>\n        <li>jQuery 1.5.1 included in sample project.</li>\n        <li><span style="text-decoration: line-through">No more bundled RequireJS and jQuery file. RequireJS includes special code to detect jQuery as a module, so the combined file is not necessary, and this approach makes it easier to swap in new versions of jQuery as they are released.</span> (Changed on April 1, 2011 back to the old integrated sample)</li>\n        <li><span style="text-decoration: line-through">Because of that change, the jQuery sample project uses the new priority: config approach.</span> (Changed on April 1, 2011 back to the old integrated sample)</li>\n    </ul>\n</li><li>allplugins-require.js has been removed. Plugins are no longer bundled with require.js or in the sample jQuery project. There are separate download links to the existing plugins on the download page. Special treatment of these plugins has also been removed from the require.js source, so those plugins behave like any other loader plugin.</li>\n<li>There is now a <a href=#cs>CoffeScript plugin</a>. It makes it easy to code in CoffeeScript in the browser, it can participate in the optimizer optimizations, and it works in Node and Rhino. This is the best way to do cross-environment, modular CoffeeScript.</li>\n<li>Bug fixes.</li>\n</ul>\n\n<h3>0.23.0</h3>\n\n<ul>\n<li>Calculation of baseUrl changed. This affects the jQuery Sample project, which has been updated in this release. Instead of baseUrl defaulting to the directory containing require.js, it now defaults to the HTML page\'s directory. If data-main is used, then the directory used in that attribute becomes the baseUrl. Explicitly setting baseUrl in the configuration overrides the aforementioned defaults.</li>\n<li>The RequireJS optimizer now uses Node by default. So, build.sh/.bat are now Node-based. Java/Rhino is still supported via the buildj.sh/.bat scripts.</li>\n<li><a href=https://github.com/mishoo/UglifyJS>UglifyJS</a> is now the default minifier for the optimizer, since it works both in Node and in Rhino. However, UglifyJS does not do if/else dead code removal, so the <a href=optimization.html#hasjs>has() optimization</a> is not that great when using UglifyJS. Hopefully this will change in a future version of UglifyJS. If you want the full has() optimization, Closure Compiler can still be used, either by using buildj.sh to use Java/Rhino to do the optimization work, or by running Closure Compiler yourself after the optimizer runs.</li>\n<li>The behavior of the Node adapter, r.js has changed. It now assumes that any module found via the RequireJS config uses define() to define modules. If a module is not found via the RequireJS path config, r.js uses Node\'s native require() function and its pathing rules\nto find the module. This allows the most compatible use of npm-installed modules. However it means you <strong>should not</strong> include RequireJS configuration for npm-installed modules/packages.</li>\n<li>The r.js adapter now works in Node and Rhino.</li>\n<li>The config option, <strong>baseUrlMatch</strong> has been removed, since the data-main baseUrl rule mentioned above removes the need for it.</li>\n<li>Some important fixes around loader plugins: a fix to allow multiple modules to use the same plugin resources as a common dependency, and to allow loader plugins that use a define() function callback to work in the optimizer.</li>\n<li>A fix for the use of jQuery\'s readyWait capability when jQuery is detected and used as a module.</li>\n<li>Some directory shuffling related to making the rhino and node adapters the same for use in command line tools and in the r.js adapter.</li>\n</ul>\n\n<h3>0.22.0</h3>\n\n<ul>\n<li>A <a href=plugins.html>full plugin API</a> that supports also including plugin loaded artifacts in optimized builds.</li>\n<li><a href=node.html>Robust Node support</a>: now can use npm-installed modules, .node add-ons, and modules on require.paths.</li>\n<li>Support for <a href=optimization.html#hasjs>has.js optimizations</a> in the optimizer, including dead code branch removal via Closure Compiler.\n</li><li><a href="https://github.com/jrburke/requirejs/commits/">Bug Fixes from 2010-12-21 through 2011-01-05</a>.</li>\n</ul>\n</div>\n</div></body></html>'});