montageDefine("daa4856","vendor/requirejs/docs/start.html",{text:'<html><head></head><body><div id=directory class=section>\n    <h1>How to get started with RequireJS</h1>\n\n    <ul class="index mono">\n        <li class=hbox>\n            <a href=#get>Get RequireJS</a><span class="spacer boxFlex"></span><span class=sect>§ 1</span>\n        </li>\n        <li class=hbox>\n            <a href=#add>Add RequireJS</a><span class="spacer boxFlex"></span><span class=sect>§ 2</span>\n        </li>\n        <li class=hbox>\n            <a href=#optimize>Optimize</a><span class="spacer boxFlex"></span><span class=sect>§ 3</span>\n        </li>\n    </ul>\n\n    <span class=note>Note: If you are using jQuery, there is a <a href=jquery.md>targeted jQuery tutorial</a></span>\n</div>\n\n<div class=section>\n<h2>\n    <a name=get>Get RequireJS</a>\n    <span class=sectionMark>§ 1</span>\n</h2>\n\n<p>Go to the <a href=download.md>download</a> page and get the file.</p>\n</div>\n\n<div class=section>\n<h2>\n    <a name=add>Add RequireJS</a>\n    <span class=sectionMark>§ 2</span>\n</h2>\n\n<span class=note>Note: For jQuery-specific advice, see the <a href=jquery.html>jQuery integration page</a></span>\n\n<p>This setup assumes you keep all your JavaScript files in a "scripts" directory in your project. For example, if you have a project that has an project.html page, with some scripts, the directory layout might look like so:</p>\n\n<ul>\n    <li>project-directory/\n    <ul>\n        <li>project.html</li>\n        <li>scripts/\n        <ul>\n            <li>main.js</li>\n            <li>helper/\n            <ul>\n                <li>util.js</li>\n            </ul></li>\n        </ul></li>\n    </ul></li>\n</ul>\n\n<p>Add require.js to the scripts directory, so it looks like so:</p>\n\n<ul>\n    <li>project-directory/\n    <ul>\n        <li>project.html</li>\n        <li>scripts/\n        <ul>\n            <li>main.js</li>\n            <li>require.js</li>\n            <li>helper/\n            <ul>\n                <li>util.js</li>\n            </ul></li>\n        </ul></li>\n    </ul></li>\n</ul>\n\n<p>To take full advantage of the optimization tool, it is suggested that you keep all inline script out of the HTML, and only reference require.js with a require call like so to load your script:</p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;My Sample Project&lt;/title&gt;\n        &lt;!-- data-main attribute tells require.js to load\n             scripts/main.js after require.js loads. --&gt;\n        &lt;script data-main="scripts/main" src="scripts/require.js"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;My Sample Project&lt;/h1&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<span class=note>The path rules used for data-main changed in RequireJS 0.23. Before that version, data-main="main" for the above example.</span>\n\n<p>Inside of main.js, you can use require() to load any other scripts you need to run:</p>\n\n<pre><code>require(["helper/util"], function(util) {\n    //This function is called when scripts/helper/util.js is loaded.\n    //If util.js calls define(), then this function is not fired until\n    //util\'s dependencies have loaded, and the util argument will hold\n    //the module value for "helper/util".\n});\n</code></pre>\n\n<p>That is it! Check out the <a href=api.html>API docs</a> to learn more about require() and define().</p>\n</div>\n\n<div class=section>\n<h2>\n    <a name=optimize>Optimize</a>\n    <span class=sectionMark>§ 3</span>\n</h2>\n\n<p>Once you are finished doing development and want to deploy your code for your end users, you can use the <a href=optimization.md>optimizer</a> to combine the JavaScript files together and minify it. In the example above, it can combine main.js and helper/util.js into one file and minify the result.</p>\n</div>\n</body></html>'});