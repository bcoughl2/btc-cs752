montageDefine("daa4856","vendor/requirejs/docs/plugins.html",{text:"<html><head></head><body><div id=directory class=section>\n<h1>Plugins</h1>\n\n<ul class=\"index mono\">\n    <li class=hbox><a href=#intro>Intro</a><span class=\"spacer boxFlex\"></span><span class=sect>§ 1</span></li>\n    <li class=hbox><a href=#names>Plugin Names</a><span class=\"spacer boxFlex\"></span><span class=sect>§ 2</span></li>\n    <li class=hbox><a href=#api>API</a><span class=\"spacer boxFlex\"></span><span class=sect>§ 3</span></li>\n    <ul>\n        <li class=hbox><a href=#apiload>load</a><span class=\"spacer boxFlex\"></span><span class=sect>§ 3.1</span></li>\n        <li class=hbox><a href=#apinormalize>normalize</a><span class=\"spacer boxFlex\"></span><span class=sect>§ 3.2</span></li>\n        <li class=hbox><a href=#apiwrite>write</a><span class=\"spacer boxFlex\"></span><span class=sect>§ 3.3</span></li>\n        <li class=hbox><a href=#apiwritefile>writeFile</a><span class=\"spacer boxFlex\"></span><span class=sect>§ 3.4</span></li>\n        <li class=hbox><a href=#apipluginbuilder>pluginBuilder</a><span class=\"spacer boxFlex\"></span><span class=sect>§ 3.5</span></li>\n    </ul>\n</ul>\n</div>\n\n<div class=section>\n<h2 id=intro>\nIntro\n<span class=sectionMark>§ 1</span>\n</h2>\n\n<p>RequireJS allows you to write loader plugins that can load different types of resources as dependencies, and even include the dependencies in optimized builds.</p>\n\n<p>Examples of existing loader plugins are the <a href=api.html#text>text!</a> and <a href=api.html#i18n>i18n!</a> plugins. The text! plugin handles loading text, and the i18n plugin handles loading a JavaScript object that is made up from objects from a few different modules. The object contains localized strings.</p>\n</div>\n\n<div class=section>\n<h2 id=names>\nPlugin Names\n<span class=sectionMark>§ 2</span>\n</h2>\n\n<p>Loader plugins are just another module, but they implement a specific API. Loader plugins can also participate in the optimizer optimizations, allowing the resources they load to be inlined in an optimized build.</p>\n\n<p><b>Note</b>: the plugin and its dependencies should be able to run in non-browser environments like Node and Rhino. If they cannot, you should use an alternate <a href=#apipluginbuilder>plugin builder</a> module that can run in those environments.</p>\n\n<p>You can reference your plugin by putting its module name before a ! in the dependency. For instance, if you create a plugin with the name \"foo.js\", you would use it like so:</p>\n\n<pre><code>\nrequire(['foo!something/for/foo'], function (something) {\n    //something is a reference to the resource\n    //'something/for/foo' that was loaded by foo.js.\n});\n</code></pre>\n\n<p>So, the plugin's module name comes before the ! separator. The part after the ! separator is called the <b>resource name</b>. The resource name may look like a normal module name. The plugin's module name can be any valid module name, so for instance, you could use a relative indicator:</p>\n\n<pre><code>\nrequire(['./foo!something/for/foo'], function (something) {\n});\n</code></pre>\n\n<p>Or, if it was inside a package or directory, say bar/foo.js:</p>\n\n<pre><code>\nrequire(['bar/foo!something/for/foo'], function (something) {\n});\n</code></pre>\n\n<p>Note that before 0.24.0, the text!, i18n! and order! plugins were \"special\" in that you only need to use a name like \"text\" to refer to it, but the actual module name was \"require/text\". This was done to support old code that was authored before the Plugin API was fully fleshed out. That magic module name transformation is no longer done in 0.24.0 and greater.</p>\n\n</div>\n\n<div class=section>\n<h2 id=api>\nAPI\n<span class=sectionMark>§ 3</span>\n</h2>\n\n<p>RequireJS will load the plugin module first, then pass the rest of the dependency name to a load() method on the plugin. There are also some methods to help with module name normalization and for making use of the plugin as part of the <a href=optimization.html>optimizer</a>.</p>\n\n<p>The complete Plugin API:</p>\n\n<ul>\n    <li><b><a href=#apiload>load</a></b>: A function that is called to load a resource. This is the only mandatory API method that needs to be implemented for the plugin to be useful.</li>\n    <li><b><a href=#apinormalize>normalize</a></b>: A function to normalize the resource name. This is useful in providing optimal caching and optimization, but only needed if the resource name is not a module name.</li>\n    <li><b><a href=#apiwrite>write</a></b>: used by the optimizer to indicate when the plugin should write out a representation of the the resource in the optimized file.</li>\n    <li><b><a href=#apipluginbuilder>pluginBuilder</a></b>: A module name string for a module that should be used in the optimizer to do optimization work. That module is used instead of the plugin module when the optimizer runs.</li>\n</ul>\n\n<h3>\n<a name=apiload>load: function (name, parentRequire, load, config)</a>\n<span class=sectionMark>§ 3.1</span>\n</h3>\n\n<p>load is a function, and it will be called with the following arguments:</p>\n\n<ul>\n    <li><b>name</b>: String. The name of the resource to load. This is the part after the ! separator in the name. So, if a module asks for 'foo!something/for/foo', the foo module's load function will receive 'something/for/foo' as the name.</li>\n    <li><b>parentRequire</b>: Function. A local \"require\" function to use to load other modules. This require function has some utilities on it:\n    <ul>\n        <li><b>parentRequire.toUrl(moduleResource)</b>:where moduleResource is a module name plus an extension. For instance \"view/templates/main.html\". It will return a full path to the resource, obeying any RequireJS configuration.</li>\n        <li><b>parentRequire.defined(moduleName)</b>: Returns true if the module has already been loaded and defined. Used to be called require.isDefined before RequireJS 0.25.0.</li>\n        <li><b>parentRequire.specified(moduleName)</b>: Returns true if the module has already been requested or is in the process of loading and should be available at some point.</li>\n    </ul></li>\n    <li><b>load</b>: Function. A function to call with the value for name. This tells the loader that the plugin is done loading the resource.</li>\n    <li><b>config</b>: Object. A configuration object. This is a way for the optimizer and the web app to pass configuration information to the plugin. The i18n! plugin uses this to get the current current locale, if the web app wants to force a specific locale. The optimizer will set an <b>isBuild</b> property in the config to true if this plugin (or pluginBuilder) is being called as part of an optimizer build.</li>\n</ul>\n\n<p>An example plugin that does not do anything interesting, just does a normal require to load a JS module:</p>\n\n<pre><code>\ndefine({\n    load: function (name, req, load, config) {\n        //req has the same API as require().\n        req([name], function (value) {\n            load(value);\n        });\n    }\n});\n</code></pre>\n\n<p>Some plugins may need to evaluate some JavaScript that was retrieved as text. To evaluate the JavaScript correctly, particularly if it contains require() or define() calls, there is a function off the load() argument, <strong>load.fromText()</strong>, that can be used to evaluate the JavaScript. eval() is used by RequireJS to evaluate that JavaScript.</p>\n\n<p>Arguments for load.fromText():</p>\n\n<ul>\n    <li><b>name</b>: String. The name of the module being loaded. Useful for anonymous module calls. Always pass a value. You can use the file path that was used to retrieve the text if there is no matching module name for the text.</li>\n    <li><b>text</b>: String. The string of JavaScript to evaluate..</li>\n</ul>\n\n<p>An example plugin's load function that uses load.fromText():</p>\n\n<pre><code>\ndefine({\n    load: function (name, req, load, config) {\n        var url = req.toUrl(name + '.customFileExtension'),\n            text;\n\n        //Use a method to load the text (provide elsewhere)\n        //by the plugin\n        fetchText(url, function (text) {\n            //Transform the text as appropriate for\n            //the plugin by using a transform()\n            //method provided elsewhere in the plugin.\n            text = transform(text);\n\n            //Have RequireJS execute the JavaScript within\n            //the correct environment/context.\n            load.fromText(name, text);\n\n            //Now get a handle on the evaluated module,\n            //to return that value for this plugin-loaded\n            //resource\n            req([name], function (value) {\n                load(value);\n            });\n        });\n    }\n});\n</code></pre>\n\n<h3>\n<a name=apinormalize>normalize: function (name, normalize)</a>\n<span class=sectionMark>§ 3.2</span>\n</h3>\n\n<p><b>normalize</b> is called to normalize the name used to identify a resource. Some resources could use relative paths, and need to be normalized to the full path. normalize is called with the following arguments:</p>\n\n<ul>\n    <li><b>name</b>: String. The resource name to normalize.</li>\n    <li><b>normalize</b>: Function. A function that can be called to normalize a regular module name.</li>\n</ul>\n\n<p>An example: suppose there is an <b>index!</b> plugin that will load a module name given an index. This is a contrived example, just to illustrate the concept. A module may reference an index! resource like so:</p>\n\n<pre><code>\ndefine(['index!2?./a:./b:./c'], function (indexResource) {\n    //indexResource will be the module that corresponds to './c'.\n});\n</code></pre>\n\n<p>In this case, the normalized names the './a', './b', and './c' will be determined relative to the module asking for this resource. Since RequireJS does not know how to inspect the 'index!2?./a:./b:./c' to normalize the names for './a', './b', and './c', it needs to ask the plugin. This is the purpose of the normalize call.</p>\n\n<p>By properly normalizing the resource name, it allows the loader to cache the value effectively, and to properly build an optimized build layer in the optimizer.</p>\n\n<p>The <b>index!</b> plugin could be written like so:</p>\n\n<pre><code>\n(function () {\n\n    //Helper function to parse the 'N?value:value:value'\n    //format used in the resource name.\n    function parse(name) {\n        var parts = name.split('?'),\n            index = parseInt(parts[0], 10),\n            choices = parts[1].split(':'),\n            choice = choices[index];\n\n        return {\n            index: index,\n            choices: choices,\n            choice: choice\n        };\n    }\n\n    //Main module definition.\n    define({\n        normalize: function (name, normalize) {\n            var parsed = parse(name),\n                choices = parsed.choices;\n\n            //Normalize each path choice.\n            for (i = 0; i &lt; choices.length; i++) {\n                //Call the normalize() method passed in\n                //to this function to normalize each\n                //module name.\n                choices[i] = normalize(choices[i]);\n            }\n\n            return parsed.index + '?' + choices.join(':');\n        },\n\n        load: function (name, req, load, config) {\n            req([parse(name).choice], function (value) {\n                load(value);\n            });\n        }\n    });\n\n}());\n</code></pre>\n\n<p>You do not need to implement normalize if the resource name is just a regular module name. For instance, the text! plugin does not implement normalize because the dependency names look like 'text!./some/path.html'.</p>\n\n<p>If a plugin does not implement normalize, then the loader will try to normalize the resource name using the normal module name rules.</p>\n\n<h3>\n<a name=apiwrite>write: function (pluginName, moduleName, write)</a>\n<span class=sectionMark>§ 3.3</span>\n</h3>\n\n<p><b>write</b> is only used by the optimizer, and it only needs to be implemented if the plugin can output something that would belong in an optimized layer. It is called with the following arguments:</p>\n\n<ul>\n    <li><b>pluginName</b>: String. The <b>normalized</b> name for the plugin. Most plugins will not be authored with a name (they will be anonymous plugins) so it is useful to know the normalized name for the plugin module for use in the optimized file.</li>\n    <li><b>name</b>: String. The <b>normalized</b> resource name.</li>\n    <li><b>write</b>: Function. A function to be called with a string of output to write to the optimized file. This function also contains a property function, <b>write.asModule(moduleName, text)</b>. asModule can be used to write out a module that may have an anonymous define call in there that needs name insertion or/and contains implicit require(\"\") dependencies that need to be pulled out for the optimized file. asModule is useful for text transform plugins, like a CoffeeScript plugin.</li>\n</ul>\n\n<p>The text! plugin implements write, to write out a string value for the text file that it loaded. A snippet from that file:</p>\n\n<pre><code>\nwrite: function (pluginName, moduleName, write) {\n    //The text plugin keeps a map of strings it fetched\n    //during the build process, in a buildMap object.\n    if (moduleName in buildMap) {\n        //jsEscape is an internal method for the text plugin\n        //that is used to make the string safe\n        //for embedding in a JS string.\n        var text = jsEscape(buildMap[moduleName]);\n        write(\"define('\" + pluginName + \"!\" + moduleName  +\n              \"', function () { return '\" + text + \"';});\\n\");\n    }\n}\n</code></pre>\n\n<h3>\n<a name=apiwritefile>writeFile: function (pluginName, moduleName, write)</a>\n<span class=sectionMark>§ 3.4</span>\n</h3>\n\n<p><b>writeFile</b> is only used by the optimizer, and it only needs to be implemented if the plugin needs to write out an alternate version of a dependency that is handled by the plugin. It is a bit expensive to scan all modules in a project to look for all plugin dependencies, so this writeFile method will only be called if <b>optimizeAllPluginResources: true</b> is in the build profile for the RequireJS optimizer. writeFile is called with the following arguments:</p>\n\n<ul>\n    <li><b>pluginName</b>: String. The <b>normalized</b> name for the plugin. Most plugins will not be authored with a name (they will be anonymous plugins) so it is useful to know the normalized name for the plugin module for use in the optimized file.</li>\n    <li><b>name</b>: String. The <b>normalized</b> resource name.</li>\n    <li><b>parentRequire</b>: Function. A local \"require\" function. The main use of this in writeFile is for calling parentRequire.toUrl() to generate file paths that are inside the build directory.</li>\n    <li><b>write</b>: Function. A function to be called with two arguments:\n        <ul>\n            <li><b>fileName</b>: String. The name of the file to write. You can use parentRequire.toUrl() with a relative path to generate a file name that will be inside the build output directory.</li>\n            <li><b>text</b>: String. The contents of the file. Must be UTF-8 encoded.</li>\n        </ul>\n        This function also contains a property function, <b>write.asModule(moduleName, fileName, text)</b>. asModule can be used to write out a module that may have an anonymous define call in there that needs name insertion or/and contains implicit require(\"\") dependencies that need to be pulled out for the optimized file.</li>\n        <li><b>config</b>: Object. A configuration object. This is a way for the optimizer to pass configuration information to the plugin.</li>\n</ul>\n\n<p>See the <a href=https://github.com/jrburke/requirejs/blob/master/text.js>text! plugin</a> for an example of writeFile.</p>\n\n<h3>\n<a name=apipluginbuilder>pluginBuilder</a>\n<span class=sectionMark>§ 3.5</span>\n</h3>\n\n<p><b>pluginBuilder</b> can be a string that points to another module to use instead of the current plugin when the plugin is used as part of an optimizer build.</p>\n\n<p>A plugin could have very specific logic that depends on a certain environment, like the browser. However, when run inside the optimizer, the environment is very different, and the plugin may have a <b>write</b> plugin API implementation that it does not want to deliver as part of the normal plugin that is loaded in the browser. In those cases, specifying a pluginBuilder is useful.</p>\n\n<p>Some notes about using a pluginBuilder:</p>\n\n<ul>\n    <li>Do not use named modules for the plugin or the pluginBuilder. The pluginBuilder text contents are used instead of the contents of the plugin file, but that will only work if the files do not call define() with a name.</li>\n    <li>Plugins and pluginBuilders that run as part of the build process have a very limited environment. Right now the optimizer runs on top of Rhino, but it may in the future run also on Node. Be careful of the environment assumptions if you want the plugin to run as part of the optimizer.</li>\n</ul>\n\n</div>\n</body></html>"});