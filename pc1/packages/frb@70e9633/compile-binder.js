function compile(e){return compile.semantics.compile(e)}var compileObserver=require("./compile-observer"),Observers=require("./observers"),Binders=require("./binders"),solve=require("./algebra"),valueSyntax={type:"value"},trueSyntax={type:"literal",value:!0};module.exports=compile,compile.semantics={compilers:{property:Binders.makePropertyBinder,get:Binders.makeGetBinder,has:Binders.makeHasBinder,only:Binders.makeOnlyBinder,one:Binders.makeOneBinder,rangeContent:Binders.makeRangeContentBinder,mapContent:Binders.makeMapContentBinder,reversed:Binders.makeReversedBinder,and:Binders.makeAndBinder,or:Binders.makeOrBinder},compile:function(e){var t=this.compilers;if("default"===e.type)return this.compile(e.args[0]);if("literal"===e.type){if(null==e.value)return Function.noop;throw Error("Can't bind to literal: "+e.value)}if("equals"===e.type){var n=this.compile(e.args[0]),i=compileObserver(e.args[1]);return Binders.makeEqualityBinder(n,i)}if("if"===e.type){var r=compileObserver(e.args[0]),a=this.compile(e.args[1]),s=this.compile(e.args[2]);return Binders.makeConditionalBinder(r,a,s)}if("and"===e.type||"or"===e.type){var o=solve(e.args[0],valueSyntax),l=solve(e.args[1],valueSyntax),n=this.compile(o[0]),c=this.compile(l[0]),u=compileObserver(o[1]),h=compileObserver(l[1]),d=compileObserver(e.args[0]),i=compileObserver(e.args[1]);return this.compilers[e.type](n,c,d,i,u,h)}if("everyBlock"===e.type){var p=compileObserver(e.args[0]),m=solve(e.args[1],trueSyntax),f=this.compile(m[0]),g=compileObserver(m[1]);return Binders.makeEveryBlockBinder(p,f,g)}if("rangeContent"===e.type){var v,_=compileObserver(e.args[0]);try{v=this.compile(e.args[0])}catch(b){v=Function.noop}return Binders.makeRangeContentBinder(_,v)}if("defined"===e.type){var v=this.compile(e.args[0]);return Binders.makeDefinedBinder(v)}if("parent"===e.type){var v=this.compile(e.args[0]);return Binders.makeParentBinder(v)}if("with"===e.type){var _=compileObserver(e.args[0]),v=this.compile(e.args[1]);return Binders.makeWithBinder(_,v)}if(t.hasOwnProperty(e.type)){var y=e.args.map(compileObserver,compileObserver.semantics);return t[e.type].apply(null,y)}throw Error("Can't compile binder for "+JSON.stringify(e.type))}};